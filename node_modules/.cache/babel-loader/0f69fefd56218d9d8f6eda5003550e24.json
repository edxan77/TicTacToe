{"ast":null,"code":"var _jsxFileName = \"/home/edxan77/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/xo/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  count: 0\n};\nconst dispatchMap = {\n  increment: \"increment\",\n  decrement: \"decrement\",\n  reset: \"reset\"\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"increment\":\n      return {\n        count: state.count + 1\n      };\n\n    case \"decrement\":\n      return {\n        count: state.count - 1\n      };\n\n    case \"reset\":\n      return {\n        count: 0\n      };\n\n    case \"add12\":\n      return {\n        count: state.count + action.payload.quantity\n      };\n\n    default:\n      throw new Error();\n  }\n}\n\nfunction Counter() {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"Count: \", state.count, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => dispatch({\n        type: \"decrement\"\n      }),\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => dispatch({\n        type: \"increment\"\n      }),\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => dispatch({\n        type: \"reset\"\n      }),\n      children: \"reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => dispatch({\n        type: \"add12\",\n        payload: {\n          quantity: 12\n        }\n      }),\n      children: \"add 12\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        try {\n          if (dispatchMap[\"1234\"]) {\n            dispatch({\n              type: \"1234\",\n              payload: {\n                quantity: 12\n              }\n            });\n          } else {\n            throw new Error(\"unhandled dispatch\");\n          }\n        } catch (err) {\n          console.log(err.message);\n        }\n      },\n      children: \"add 1234\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Counter, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = Counter;\nexport default Counter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"sources":["/home/edxan77/Рабочий стол/xo/src/App.js"],"names":["useReducer","initialState","count","dispatchMap","increment","decrement","reset","reducer","state","action","type","payload","quantity","Error","Counter","dispatch","err","console","log","message"],"mappings":";;;AACA,SAASA,UAAT,QAA2B,OAA3B;;;AAEA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAArB;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,SAAS,EAAE,WADO;AAElBC,EAAAA,SAAS,EAAE,WAFO;AAGlBC,EAAAA,KAAK,EAAE;AAHW,CAApB;;AAMA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC9B,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,aAAO;AAAER,QAAAA,KAAK,EAAEM,KAAK,CAACN,KAAN,GAAc;AAAvB,OAAP;;AACF,SAAK,WAAL;AACE,aAAO;AAAEA,QAAAA,KAAK,EAAEM,KAAK,CAACN,KAAN,GAAc;AAAvB,OAAP;;AACF,SAAK,OAAL;AACE,aAAO;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAAP;;AACF,SAAK,OAAL;AACE,aAAO;AAAEA,QAAAA,KAAK,EAAEM,KAAK,CAACN,KAAN,GAAcO,MAAM,CAACE,OAAP,CAAeC;AAAtC,OAAP;;AACF;AACE,YAAM,IAAIC,KAAJ,EAAN;AAVJ;AAYD;;AAED,SAASC,OAAT,GAAmB;AAAA;;AACjB,QAAM,CAACN,KAAD,EAAQO,QAAR,IAAoBf,UAAU,CAACO,OAAD,EAAUN,YAAV,CAApC;AAEA,sBACE;AAAA,0BACUO,KAAK,CAACN,KADhB,eAEE;AAAQ,MAAA,OAAO,EAAE,MAAMa,QAAQ,CAAC;AAAEL,QAAAA,IAAI,EAAE;AAAR,OAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAQ,MAAA,OAAO,EAAE,MAAMK,QAAQ,CAAC;AAAEL,QAAAA,IAAI,EAAE;AAAR,OAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAQ,MAAA,OAAO,EAAE,MAAMK,QAAQ,CAAC;AAAEL,QAAAA,IAAI,EAAE;AAAR,OAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AACE,MAAA,OAAO,EAAE,MAAMK,QAAQ,CAAC;AAAEL,QAAAA,IAAI,EAAE,OAAR;AAAiBC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,QAAQ,EAAE;AAAZ;AAA1B,OAAD,CADzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAUE;AACE,MAAA,OAAO,EAAE,MAAM;AACb,YAAI;AACF,cAAIT,WAAW,CAAC,MAAD,CAAf,EAAyB;AACvBY,YAAAA,QAAQ,CAAC;AAAEL,cAAAA,IAAI,EAAE,MAAR;AAAgBC,cAAAA,OAAO,EAAE;AAAEC,gBAAAA,QAAQ,EAAE;AAAZ;AAAzB,aAAD,CAAR;AACD,WAFD,MAEO;AACL,kBAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AACD;AACF,SAND,CAME,OAAOG,GAAP,EAAY;AACZC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB;AACD;AACF,OAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA,kBADF;AA4BD;;GA/BQL,O;;KAAAA,O;AAgCT,eAAeA,OAAf","sourcesContent":["\nimport { useReducer } from \"react\";\n\nconst initialState = { count: 0 };\n\nconst dispatchMap = {\n  increment: \"increment\",\n  decrement: \"decrement\",\n  reset: \"reset\",\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"increment\":\n      return { count: state.count + 1 };\n    case \"decrement\":\n      return { count: state.count - 1 };\n    case \"reset\":\n      return { count: 0 };\n    case \"add12\":\n      return { count: state.count + action.payload.quantity };\n    default:\n      throw new Error();\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <>\n      Count: {state.count}\n      <button onClick={() => dispatch({ type: \"decrement\" })}>-</button>\n      <button onClick={() => dispatch({ type: \"increment\" })}>+</button>\n      <button onClick={() => dispatch({ type: \"reset\" })}>reset</button>\n      <button\n        onClick={() => dispatch({ type: \"add12\", payload: { quantity: 12 } })}\n      >\n        add 12\n      </button>\n      <button\n        onClick={() => {\n          try {\n            if (dispatchMap[\"1234\"]) {\n              dispatch({ type: \"1234\", payload: { quantity: 12 } });\n            } else {\n              throw new Error(\"unhandled dispatch\");\n            }\n          } catch (err) {\n            console.log(err.message);\n          }\n        }}\n      >\n        add 1234\n      </button>\n    </>\n  );\n}\nexport default Counter\n"]},"metadata":{},"sourceType":"module"}